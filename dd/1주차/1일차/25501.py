# https://www.acmicpc.net/problem/25501
# 문제 설명: 주어진 문자열이 팰린드롬인지 판별하고, 판별 과정에서 재귀 함수가 몇 번 호출되었는지 출력합니다.
# 핵심 개념: 재귀 함수를 이용한 팰린드롬 판별
# 재귀 함수 사용 조건: 재귀 함수는 기본적으로 탈출 조건을 명확히 해야 하며, 복잡한 반복 구조보다 명료한 로직 구현에 적합합니다.
# 이 문제에서는 문자열의 양 끝부터 중앙으로 진행하며 재귀적으로 팰린드롬 여부를 판별합니다.
# 시간 복잡도: O(N/2), 여기서 N은 문자열의 길이입니다. 최악의 경우 문자열의 절반 길이만큼만 비교하면 됩니다.

def recursion(s, l, r, c):
    c += 1  # 재귀 호출 횟수 증가
    if l >= r:  # 기저 사례: 문자열을 절반까지 검사했거나, 검사할 문자가 없는 경우
        return 1, c
    elif s[l] != s[r]:  # 양 끝 문자가 다를 경우 팰린드롬이 아님
        return 0, c
    else:  # 양 끝 문자가 같으면 안쪽 문자에 대해 재귀적으로 검사
        return recursion(s, l+1, r-1, c)


def isPalindrome(s):
    c = 0  # 재귀 호출 횟수 초기화
    return recursion(s, 0, len(s)-1, c)


n = int(input())  # 테스트 케이스의 수 입력
for _ in range(n):
    a, b = isPalindrome(input())  # 각 문자열에 대해 팰린드롬 판별 및 재귀 호출 횟수 반환
    print(a, b)  # 결과 출력
