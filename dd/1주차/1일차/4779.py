# https://www.acmicpc.net/problem/4779
# 문제 설명: 재귀를 활용하여 칸토어 집합을 문자열 형태로 표현하는 문제
# 풀이: 주어진 길이의 문자열에서 중간 1/3을 공백으로 치환하고, 남은 각 부분에 대해서도 동일한 작업을 재귀적으로 반복합니다.
# 핵심 개념: 재귀
# 재귀 함수 사용 조건: 재귀 깊이가 입력 크기에 따라 지수적으로 증가하지 않도록 주의해야 합니다.
# 이 문제에서는 문자열의 길이가 3의 n제곱으로 증가하므로, 재귀 깊이도 n에 비례하여 증가합니다.
# 이는 n의 값이 크지 않은 경우에 효율적으로 작동합니다.
# 시간 복잡도: O(N), 여기서 N은 생성된 문자열의 길이입니다.
# 각 재귀 호출마다 처리해야 하는 문자열의 길이가 1/3로 줄어들기 때문에, 전체적으로 모든 문자를 한 번씩은 처리하게 됩니다.

def canto(s):
    # 문자열 s가 길이 1이면 s를 반환
    if len(s) == 1:
        return s

    # 문자열을 셋으로 나눔
    l = int(len(s)/3)
    # 첫 번째 1/3, 중간 1/3은 공백으로 치환, 마지막 1/3에 대해 같은 작업을 재귀적으로 수행
    return canto(s[:l]) + ' '*l + canto(s[2*l:])


# 무한 루프를 통해 여러 입력 처리
while True:
    try:
        # n을 입력받아 3의 n제곱 길이의 문자열 생성
        n = int(input())
        data = '-' * (3 ** n)
        # 생성된 문자열에 대해 칸토어 집합 생성 함수 호출
        print(canto(data))
    except:
        # 입력이 더 이상 없으면 반복문 종료
        break
